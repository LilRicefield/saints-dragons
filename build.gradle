plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = '1.0.0'
group = 'com.leon.saintsdragons'

base {
    archivesName = mod_id
}
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: "official", version: "1.20.1"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Ensure Mixin refmaps from dependencies remap to dev names
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            // Enable Mixins in client runtime
            arg "-mixin.config=${mod_id}.mixins.json"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
            // Enable Mixins in dedicated server runtime
            arg "-mixin.config=${mod_id}.mixins.json"
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
            // Enable Mixins in game test runtime
            arg "-mixin.config=${mod_id}.mixins.json"
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', 'saintsdragons', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

// Configure mixin to emit a refmap and register config
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

repositories {
    mavenCentral()
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }
    maven {
        url 'https://maven.minecraftforge.net/'
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url  "https://modmaven.dev"
    }
    maven {
        name = "CurseMaven"
        url  "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:1.20.1-47.4.0"
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
    implementation("com.eliotlash.mclib:mclib:20")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.named('publish').configure {
     dependsOn 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
